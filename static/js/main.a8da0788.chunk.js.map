{"version":3,"sources":["hooks/useApp.ts","helper.ts","hooks/useWebSocket.ts","components/StateProvider.tsx","components/useControlPanel.ts","components/ControlPanel.tsx","components/useSymbolBidAsk.ts","components/SymbolBidAsk.tsx","components/useSymbolTicker.ts","components/SymbolTicker.tsx","components/useSymbolList.ts","components/SymbolList.tsx","services/ApiService.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","depth","favSymbols","createDepthTopicFromSymbol","symbol","concat","createTickerTopicFromSymbol","topics","StateContext","createContext","useState","useContext","StateProvider","_ref","children","appState","apiService","_useState","_useState2","Object","slicedToArray","state","setState","fetchFavSymbols","useCallback","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","getFavSymbols","sent","prevState","objectSpread","abrupt","stop","this","setDepth","useApp","webSocketState","host","arguments","length","undefined","port","socket","streams","useRef","current","Map","topicStr","useMemo","join","url","close","newSocket","WebSocket","onmessage","event","_JSON$parse","JSON","parse","data","stream","newStreams","set","subscribeSymbols","symbols","depthTopics","map","s","tickerTopics","toConsumableArray","forEach","topic","useWebSocket","react_default","createElement","Provider","value","useControlPanel","subscribedUrl","subscribedTopics","onSelectDepth","_ref3","_callee2","_context2","target","_x","apply","selectEventUidByTopic","get","lastUpdateId","E","depthOptions","ControlPanel","vm","className","onChange","d","key","it","useSymbolBidAsk","bids","asks","Table","styled","table","attrs","_templateObject","QuoteTable","title","source","colSpan","_ref2","price","qty","SymbolBidAsk","_ref4","SymbolBidAsk_QuoteTable","useSymbolTicker","priceChangePercentage","P","stats","label","o","h","l","c","v","b","n","SymbolTicker","useSymbolList","titleForSymbol","toUpperCase","SymbolList","Fragment","components_SymbolTicker","components_SymbolBidAsk","ApiService","classCallCheck","createClass","_getFavSymbols","fakeFavSymbolsApiCall","Promise","resolve","setTimeout","App","components_StateProvider","components_ControlPanel","components_SymbolList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8da0788.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\nexport type AppState = {\n  depth: number;\n  favSymbols: string[];\n};\n\nconst initialState: AppState = {\n  depth: 10,\n  favSymbols: [],\n};\n\nexport function useApp(apiService: any) {\n  const [state, setState] = useState(initialState);\n\n  // this callback only change if apiService is replaced\n  const fetchFavSymbols = useCallback(async () => {\n    const favSymbols = await apiService.getFavSymbols();\n    setState(prevState => ({ ...prevState, favSymbols }));\n    return favSymbols;\n  }, [apiService]);\n\n  // set the depth\n  // this callback never change\n  const setDepth = useCallback((depth: number) => {\n    setState(prevState => ({ ...prevState, depth }));\n  }, []);\n\n  return {\n    ...state,\n    setDepth,\n    fetchFavSymbols,\n  };\n}\n","// pure function to create topic from symbol and depth\nexport function createDepthTopicFromSymbol(symbol: string, depth: number) {\n  return `${symbol}@depth${depth}`\n}\n\nexport function createTickerTopicFromSymbol(symbol: string) {\n  return `${symbol}@ticker`\n}","import { useCallback, useState, useMemo, useRef } from 'react';\nimport { createDepthTopicFromSymbol, createTickerTopicFromSymbol } from '../helper';\n\nexport type WebSocketState = {\n  topics: string[];\n  socket?: WebSocket;\n};\n\nconst initialState: WebSocketState = {\n  topics: [],\n};\n\nexport function useWebSocket(host = 'stream.binance.com', port = 9443) {\n  const [state, setState] = useState(initialState);\n  const { topics, socket } = state;\n\n  // we need put the streams into ref so we could reference the streams map in handleMessages\n  const streams = useRef<Map<string, any>>();\n  if (!streams.current) streams.current = new Map();\n\n  // @computed\n  const topicStr = useMemo(() => topics.join('/'), [topics]);\n\n  // @computed\n  const url = useMemo(() => {\n    // Binance Websocket Documentation\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md\n    return `wss://${host}:${port}/stream?streams=${topicStr}`\n  }, [host, port, topicStr]);\n\n  // reconnect the socket if topics changed\n  // this callback only replaced if topics is changed\n  useMemo(() => {\n    socket && socket.close();\n    const newSocket = new WebSocket(url);\n    const _handleMessage = (event: MessageEvent) => {\n      const { stream, data } = JSON.parse(event.data);\n      const newStreams = new Map(streams.current!);\n      newStreams.set(stream, data);\n      streams.current = newStreams;\n      setState(prevState => ({ ...prevState }));\n    };\n    newSocket.onmessage = _handleMessage;\n    // update to newSocket\n    setState(prevState => ({ ...prevState, socket: newSocket }));\n  }, [topics]);\n\n  // subscribe the symbols\n  // this callback only replaced if host or port is changed\n  const subscribeSymbols = useCallback((symbols: string[], depth: number) => {\n    const depthTopics = symbols.map(s => createDepthTopicFromSymbol(s, depth));\n    const tickerTopics = symbols.map(createTickerTopicFromSymbol);\n\n    const topics = [...depthTopics, ...tickerTopics];\n    streams.current = new Map();\n    topics.forEach((topic) => streams.current!.set(topic, {}));\n    setState(prevState => ({ ...prevState, topics }));\n\n    return topics;\n  }, [host, port]);\n\n  return {\n    ...state,\n    url,\n    subscribeSymbols,\n    // we already know streams must be there\n    streams: streams.current!,\n  };\n}\n","import React, { createContext, useContext } from 'react';\nimport { useApp } from '../hooks/useApp';\nimport { useWebSocket } from '../hooks/useWebSocket';\nimport { ApiService } from '../services/ApiService'\n\nexport type StateContextValue = {\n  appState: ReturnType<typeof useApp>;\n  webSocketState: ReturnType<typeof useWebSocket>;\n};\n\nconst StateContext = createContext<StateContextValue>(null as any);\n\nexport type StateProviderProps = {\n  apiService: ApiService;\n  children: React.ReactNode;\n};\n\nconst StateProvider: React.SFC<StateProviderProps> = ({ children, apiService }) => {\n  const appState = useApp(apiService);\n  const webSocketState = useWebSocket();\n  return (\n    <StateContext.Provider value={{ appState, webSocketState }}>\n      {children}\n    </StateContext.Provider>\n  );\n}\n\nexport const useState = () => useContext(StateContext);\nexport default StateProvider;","import { useCallback, useMemo } from 'react';\nimport { StateContextValue } from './StateProvider';\n\nexport type UseControlPanelProps = {\n  appState: StateContextValue['appState'];\n  webSocketState: StateContextValue['webSocketState'];\n};\n\nconst useControlPanel = ({ appState, webSocketState }: UseControlPanelProps) => {\n  const depthOptions = [5, 10, 20];\n  const subscribedUrl = webSocketState.url;\n  const subscribedTopics = webSocketState.topics;\n\n  const depth = appState.depth;\n\n  useMemo(async () => {\n    // perform auto subscribe\n    const favSymbols = await appState.fetchFavSymbols();\n    webSocketState.subscribeSymbols(favSymbols, depth);\n  }, [depth]);\n\n  const onSelectDepth = useCallback(async (event) => {\n    appState.setDepth(event.target.value);\n  }, [appState]);\n\n  const selectEventUidByTopic = useCallback((topic: string) => {\n    const stream = (webSocketState.streams.get(topic) || {});\n    return stream.lastUpdateId || stream.E;\n  }, [webSocketState.streams]);\n\n  return {\n    depth: appState.depth,\n    depthOptions,\n    subscribedUrl,\n    subscribedTopics,\n    onSelectDepth,\n    selectEventUidByTopic,\n  };\n};\n\nexport default useControlPanel;\n","import React from 'react';\nimport { useState } from './StateProvider';\nimport useControlPanel from './useControlPanel';\n\nexport type ControlPanelProps = {};\n\nconst ControlPanel: React.SFC<ControlPanelProps> = () => {\n  const { appState, webSocketState } = useState();\n  const vm = useControlPanel({ appState, webSocketState });\n\n  return (\n    <div className=\"mt-5\">\n      <label>Depth:</label>\n      <select value={vm.depth} onChange={vm.onSelectDepth}>\n        {vm.depthOptions.map(d => (\n          <option key={d}>{d}</option>\n        ))}\n      </select>\n      <p>\n        <b>Subscribed WebSocket URL:</b> {vm.subscribedUrl}\n      </p>\n      <b>Subscribed Topics</b>\n      <ul>\n        {\n          vm.subscribedTopics.map(it => (\n            <li key={it}>\n              {it}(event uid:{vm.selectEventUidByTopic(it)})\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default ControlPanel;\n","import { useMemo } from 'react';\nimport { createDepthTopicFromSymbol } from '../helper'\nimport { StateContextValue } from './StateProvider';\n\nexport type UseSymbolBidAskProps = {\n  appState: StateContextValue['appState'];\n  webSocketState: StateContextValue['webSocketState'];\n  symbol: string;\n};\n\nconst useSymbolBidAsk = ({ appState, webSocketState, symbol }: StateContextValue & { symbol: string }) => {\n  const topic = useMemo(() => createDepthTopicFromSymbol(symbol, appState.depth), [symbol, appState.depth]);\n  const stream = useMemo(() => webSocketState.streams.get(topic), [webSocketState.streams]);\n  const bids = useMemo(() => stream && stream.bids ? stream.bids : [], [stream && stream.bids]);\n  const asks = useMemo(() => stream && stream.bids ? stream.asks : [], [stream && stream.bids]);\n  return { topic, stream, bids, asks };\n};\n\nexport default useSymbolBidAsk;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useState } from './StateProvider';\nimport useSymbolBidAsk from './useSymbolBidAsk';\n\nconst Table = styled.table.attrs({\n  className: 'table table-sm table-bordered text-center',\n})`\n  font-size: 10px; \n  \n  // Small devices (landscape phones, 576px and up)\n  @media (min-width: 576px) {\n    font-size: 14px;\n  }\n  \n  // Medium devices (tablets, 768px and up)\n  @media (min-width: 768px) { \n    font-size: 16px;\n  }\n`\n\ntype QuoteTableProps = {\n  title: string;\n  source: [number, number][];\n}\n\nconst QuoteTable: React.SFC<QuoteTableProps> = ({ title, source }) => (\n  <div className=\"table-responsive col-6\">\n    <Table>\n      <thead>\n        <tr>\n          <th colSpan={2}>{title}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Price</td>\n          <td>Qty</td>\n        </tr>\n        {source.map(([price, qty]) => (\n          <tr key={price}>\n            <td>{price}</td>\n            <td>{qty}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  </div>\n);\n\nexport type SymbolBidAskProps = { symbol: string };\n\nconst SymbolBidAsk: React.SFC<SymbolBidAskProps> = ({ symbol }) => {\n  const { appState, webSocketState } = useState();\n  const vm = useSymbolBidAsk({ appState, webSocketState, symbol });\n  return (\n    <div className=\"row mt-3\">\n      <b className=\"col-12 text-center\"><u>Real time OrderBook Depth</u></b>\n      <QuoteTable title=\"Bids\" source={vm.bids}/>\n      <QuoteTable title=\"Asks\" source={vm.asks}/>\n    </div>\n  )\n};\n\nexport default SymbolBidAsk;\n\n","import { useMemo } from 'react';\nimport { StateContextValue } from './StateProvider';\nimport { createTickerTopicFromSymbol } from '../helper'\n\nexport type UseSymbolTickerProps = {\n  webSocketState: StateContextValue['webSocketState'];\n  symbol: string;\n};\n\nconst useSymbolTicker = ({ webSocketState, symbol }: UseSymbolTickerProps) => {\n  const topic = createTickerTopicFromSymbol(symbol);\n  const stream = useMemo(() => webSocketState.streams.get(topic), [webSocketState.streams]);\n  const priceChangePercentage = useMemo(() => {\n    if (!stream || stream.P === undefined) return ''\n    return stream.P > 0 ? `+${stream.P}%` : `${stream.P}%`;\n  }, [stream && stream.P]);\n  const stats = useMemo(() => !stream ? [] : [\n    { label: 'Open', value: stream.o },\n    { label: 'High', value: stream.h },\n    { label: 'Low', value: stream.l },\n    { label: 'Close', value: stream.c },\n    { label: 'Volume', value: stream.v },\n    { label: 'Best bid', value: stream.b },\n    { label: 'Best ask', value: stream.a },\n    { label: 'Total Trades', value: stream.n },\n    { label: 'Price Change over 24hr', value: priceChangePercentage },\n  ], [stream, priceChangePercentage]);\n  return { topic, stream, priceChangePercentage, stats };\n};\n\nexport default useSymbolTicker;\n","import React from 'react'\nimport { useState } from './StateProvider';\nimport useSymbolTicker from './useSymbolTicker';\n\nexport type SymbolTickerProps = {\n  symbol: string;\n};\n\nconst SymbolTicker: React.SFC<SymbolTickerProps> = ({ symbol }) => {\n  const { webSocketState } = useState();\n  const vm = useSymbolTicker({ webSocketState, symbol });\n  return (\n    <div className=\"row mt-3\">\n      <b className=\"col-12 text-center under-line\"><u>24 Hour Stats</u></b>\n      {vm.stats.map(it => (\n        <div className=\"text-center text-sm-left col-12 col-sm-6 col-lg-4\" key={it.label}>\n          <b>{it.label}:</b>{it.value}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SymbolTicker;\n","import { useCallback } from 'react';\nimport { StateContextValue } from './StateProvider';\n\nexport type UseSymbolListProps = {\n  appState: StateContextValue['appState'];\n};\n\nconst useSymbolList = ({ appState }: UseSymbolListProps) => {\n  const depth = appState.depth;\n  const favSymbols = appState.favSymbols;\n  const titleForSymbol = useCallback((symbol) => symbol.toUpperCase(), []);\n  return { depth, favSymbols, titleForSymbol };\n};\n\nexport default useSymbolList;\n","import React from 'react'\nimport { useState } from './StateProvider';\nimport SymbolBidAsk from './SymbolBidAsk'\nimport SymbolTicker from './SymbolTicker'\nimport useSymbolList from './useSymbolList';\n\nexport type SymbolListProps = {};\n\nconst SymbolList: React.SFC<SymbolListProps> = () => {\n  const { appState } = useState();\n  const vm = useSymbolList({ appState });\n  return (\n    <>\n      {\n        vm.favSymbols.map(symbol => (\n          <section key={symbol}>\n            <div className=\"border-top my-5\"/>\n            <h1 className=\"text-center\">{vm.titleForSymbol(symbol)}</h1>\n            <SymbolTicker symbol={symbol}/>\n            <SymbolBidAsk symbol={symbol}/>\n          </section>\n        ))\n      }\n    </>\n  );\n};\n\nexport default SymbolList;\n","/**\n * This class should be stateless and portable\n */\nexport class ApiService {\n  async getFavSymbols() {\n    const fakeFavSymbolsApiCall = () => new Promise((resolve) => {\n      // assume there are few fav symbols\n      // for demo purpose no need to add extra axios library to call api & CORS problem\n      // https://api.binance.com/api/v1/exchangeInfo  response.symbols\n\n      setTimeout(\n        () => resolve([\n          'ethbtc',\n          'btcusdt',\n          'xrpbtc',\n          'xrpeth',\n          'ethusdt',\n          'ltcbtc',\n          'neobtc',\n          'eoseth',\n          'tusdusdt',\n        ]),\n        300,\n      )\n    })\n\n    return fakeFavSymbolsApiCall()\n  }\n}","import React, { useMemo } from 'react'\nimport StateProvider from './StateProvider'\nimport ControlPanel from './ControlPanel'\nimport SymbolList from './SymbolList'\nimport { ApiService } from '../services/ApiService'\n\nfunction App() {\n  const apiService = useMemo(() => new ApiService(), []);\n  return (\n    <div className=\"container\">\n      <StateProvider apiService={apiService}>\n        <ControlPanel/>\n        <SymbolList />\n      </StateProvider>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}